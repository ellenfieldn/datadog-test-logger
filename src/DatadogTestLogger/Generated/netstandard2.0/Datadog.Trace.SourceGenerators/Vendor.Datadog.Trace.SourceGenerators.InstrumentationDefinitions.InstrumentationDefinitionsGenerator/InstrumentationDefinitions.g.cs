// <auto-generated/>
#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Vendor.Datadog.Trace.ClrProfiler
{
    internal static partial class InstrumentationDefinitions
    {
        private static IDictionary<InstrumentationCategory, Payload> Instrumentations = new Dictionary<InstrumentationCategory, Payload>();
        private static IDictionary<InstrumentationCategory, Payload> DerivedInstrumentations = new Dictionary<InstrumentationCategory, Payload>();
        private static IDictionary<InstrumentationCategory, Payload> InterfaceInstrumentations = new Dictionary<InstrumentationCategory, Payload>();
        private static IEnumerable<NativeCallTargetDefinition> InstrumentationsNatives = new List<NativeCallTargetDefinition>();
        private static IEnumerable<NativeCallTargetDefinition> DerivedInstrumentationsNatives = new List<NativeCallTargetDefinition>();
        private static IEnumerable<NativeCallTargetDefinition> InterfaceInstrumentationsNatives = new List<NativeCallTargetDefinition>();

        static InstrumentationDefinitions()
        {
            Payload payload = default;
                // root types for InstrumentationCategory Tracing
                payload = new Payload
                {
                    DefinitionsId = "FFAFA5168C4F4718B40CA8788875C2DA",
                    Definitions = new NativeCallTargetDefinition[]
                    {
                // AzureFunctions
               new ("Microsoft.Azure.WebJobs.Host", "Microsoft.Azure.WebJobs.Host.Executors.FunctionExecutor", "TryExecuteAsync",  new[] { "System.Threading.Tasks.Task`1[Microsoft.Azure.WebJobs.Host.Executors.IDelayedException]", "Microsoft.Azure.WebJobs.Host.Executors.IFunctionInstance", "System.Threading.CancellationToken" }, 3, 0, 0, 3, 65535, 65535, assemblyFullName, "Vendor.Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.AzureFunctionsExecutorTryExecuteAsyncIntegration"),
               new ("Microsoft.Azure.WebJobs.Script.WebHost", "Microsoft.Azure.WebJobs.Script.WebHost.Middleware.FunctionInvocationMiddleware", "Invoke",  new[] { "System.Threading.Tasks.Task", "Microsoft.AspNetCore.Http.HttpContext" }, 3, 0, 0, 3, 65535, 65535, assemblyFullName, "Vendor.Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.FunctionInvocationMiddlewareInvokeIntegration"),
                    }
                };
                Instrumentations.Add(InstrumentationCategory.Tracing, payload);
                InstrumentationsNatives = InstrumentationsNatives.Concat(payload.Definitions);
                
                // root types for InstrumentationCategory AppSec
                payload = new Payload
                {
                    DefinitionsId = "8A0651DE92625A7EF3E2BBF32F0D2048",
                    Definitions = new NativeCallTargetDefinition[]
                    {
                    }
                };
                Instrumentations.Add(InstrumentationCategory.AppSec, payload);
                InstrumentationsNatives = InstrumentationsNatives.Concat(payload.Definitions);
                
                // root types for InstrumentationCategory Iast
                payload = new Payload
                {
                    DefinitionsId = "18ADCFBDCCF14141B3473C7D3B1E9494",
                    Definitions = new NativeCallTargetDefinition[]
                    {
                    }
                };
                Instrumentations.Add(InstrumentationCategory.Iast, payload);
                InstrumentationsNatives = InstrumentationsNatives.Concat(payload.Definitions);
                
                // derived types for InstrumentationCategory Tracing
                payload = new Payload
                {
                    DefinitionsId = "61BF627FA9B5477F85595A9F0D68B29C",
                    Definitions = new NativeCallTargetDefinition[]
                    {
                    }
                };
                DerivedInstrumentations.Add(InstrumentationCategory.Tracing, payload);
                DerivedInstrumentationsNatives = DerivedInstrumentationsNatives.Concat(payload.Definitions);
                
                // derived types for InstrumentationCategory AppSec
                payload = new Payload
                {
                    DefinitionsId = "02043D9EE45819725C08A53565EFDB14",
                    Definitions = new NativeCallTargetDefinition[]
                    {
                    }
                };
                DerivedInstrumentations.Add(InstrumentationCategory.AppSec, payload);
                DerivedInstrumentationsNatives = DerivedInstrumentationsNatives.Concat(payload.Definitions);
                
                // derived types for InstrumentationCategory Iast
                payload = new Payload
                {
                    DefinitionsId = "0C21F56FE62D49D78DF30D714F869815",
                    Definitions = new NativeCallTargetDefinition[]
                    {
                    }
                };
                DerivedInstrumentations.Add(InstrumentationCategory.Iast, payload);
                DerivedInstrumentationsNatives = DerivedInstrumentationsNatives.Concat(payload.Definitions);
                
                // interface types for InstrumentationCategory Tracing
                payload = new Payload
                {
                    DefinitionsId = "6410E14A2A2343BABBB45940190E1C3F",
                    Definitions = new NativeCallTargetDefinition[]
                    {
                    }
                };
                InterfaceInstrumentations.Add(InstrumentationCategory.Tracing, payload);
                InterfaceInstrumentationsNatives = InterfaceInstrumentationsNatives.Concat(payload.Definitions);
                
                // interface types for InstrumentationCategory AppSec
                payload = new Payload
                {
                    DefinitionsId = "ED012C3038C94D4FBE65900C7C29DD16",
                    Definitions = new NativeCallTargetDefinition[]
                    {
                    }
                };
                InterfaceInstrumentations.Add(InstrumentationCategory.AppSec, payload);
                InterfaceInstrumentationsNatives = InterfaceInstrumentationsNatives.Concat(payload.Definitions);
                
                // interface types for InstrumentationCategory Iast
                payload = new Payload
                {
                    DefinitionsId = "2A8E770131E64FCCB0AAC21AE3857E5E",
                    Definitions = new NativeCallTargetDefinition[]
                    {
                    }
                };
                InterfaceInstrumentations.Add(InstrumentationCategory.Iast, payload);
                InterfaceInstrumentationsNatives = InterfaceInstrumentationsNatives.Concat(payload.Definitions);
                
        }

        private static Payload GetDefinitionsArray(InstrumentationCategory instrumentationCategory = InstrumentationCategory.Tracing)
            => Instrumentations[instrumentationCategory];

        private static Payload GetDerivedDefinitionsArray(InstrumentationCategory instrumentationCategory = InstrumentationCategory.Tracing)
            => DerivedInstrumentations[instrumentationCategory];

        private static Payload GetInterfaceDefinitionsArray(InstrumentationCategory instrumentationCategory = InstrumentationCategory.Tracing)
            => InterfaceInstrumentations[instrumentationCategory];

        internal static Vendor.Datadog.Trace.Configuration.IntegrationId? GetIntegrationId(
            string? integrationTypeName, System.Type targetType)
        {
            return integrationTypeName switch
            {
                // integrations with a single IntegrationId per implementation type
                "Vendor.Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.AzureFunctionsExecutorTryExecuteAsyncIntegration"
                    or "Vendor.Datadog.Trace.ClrProfiler.AutoInstrumentation.Azure.Functions.FunctionInvocationMiddlewareInvokeIntegration"
                    => Vendor.Datadog.Trace.Configuration.IntegrationId.AzureFunctions,

                // adonet integrations
                _ => null,
            };
        }

        public static Vendor.Datadog.Trace.Configuration.IntegrationId? GetAdoNetIntegrationId(
            string? integrationTypeName, string? targetTypeName, string? assemblyName)
        {
            return new System.Collections.Generic.KeyValuePair<string?, string?>(assemblyName, targetTypeName) switch
            {
                // derived attribute, assume ADO.NET
                _ => Vendor.Datadog.Trace.Configuration.IntegrationId.AdoNet,
            };
        }
    }
}
